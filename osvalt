#!/bin/bash
#
# Osvalt (old-school viewer: apache log tool) - wrapper script for 
# "dasp" script to simply getting apache log data for date range
#
# Style guide: https://google.github.io/styleguide/shell.xml
#
#__________________________________________________________________


# SYSTEM FUNCTIONS

function sys_usage() {

  echo "Usage: osvalt [-options] [date_start] [date_end] [parametrs]...

  Required options:
    -s | apache logs directory
  Optional options:
    -f | access files pattern (def: access*)
    -o | search in files by mtime +- days count offset
    -M | user defined 12 months, separated by commas
    -t | use temp file for dasp instead of var (if perfomance issue)
    -b | debug
    -h | help
  Positional parametrs:
    -\$1 & \$2 set in any format recognized by \$(date) command

  First, form output:
    - vall  vshort
    - fip  fdate  ftype  furl  fhttp  fcode  fsize 
    - freq  fref  fagent
  Then reduce output:
    - built-in shortcuts: uniq
    - linux commands over pipe: grep, tac, head, tail, etc.
  Or/and form statistic output:
    - requests - treq_a  treq_d  treq_h
    - traffic  - tsize_a  tsize_d  tsize_h  tsize_c
    " \
    | sed 's/^\s\s//' 1>&2
  
  sys_examples
  echo ""
  sys_copyright
  
  exit 1
}

function sys_description() {

  echo "Old-school viewer: apache logs tool - bash script, that provides getting
  log data for date range from access logs

  For usage call: osvalt -h
  " | sed 's/^\s\s//' 1>&2
  
  sys_copyright

  exit 1
}

function sys_examples() {
  echo "Examples:
  - dates define \"today\", \"3 days ago\", \"now\", etc..
  - who generate 404 code: \"freq fref fagent | grep \"^GET \wp-hd87.php\"
  - pages with 303 and 503 code: \"fcode fip freq | grep \"^303\\|503\"
  - show refferers without self domain \"fref uniq | grep -v \"ans.sh\"
  - for total: add at the end of custom fields \"uniq\" for total"
}

function sys_copyright() {

  echo "Version: 1.08
  Contact: http://ans.sh or ans.novoselov@gmail.com"\
  | sed 's/^\s\s//' 1>&2

}

function sys_workdir() {
  
  # Solution from http://stackoverflow.com/a/697552/7489927

  local source \
        dir

  source="${BASH_SOURCE[0]}"

  while [ -h "$source" ]; do
      dir="$( cd -P "$( dirname "$source" )" && pwd )"
      source="$( readlink "$source" )"
      [[ $source != /* ]] && source="$dir/$source"
  done

  dir="$( cd -P "$( dirname "$source" )" && pwd )"
  
  echo "$dir"
}

function sys_tip() {

  echo "First, form output:
  - vall  vshort
  - fip  fdate  ftype  furl  fhttp  fcode  fsize 
  - freq  fref  fagent
  Then, reduce output:
  - built-in shortcuts: uniq
  - linux commands over pipe: grep, tac, head, tail, etc.
  Or/and form statistic output:
  - requests - treq_a  treq_d  treq_h
  - traffic  - tsize_a  tsize_d  tsize_h  tsize_c
  " >&2
    
}

# MAIN-PROGRAM FUNCTIONS

function main (){

  # Locals

  local OPTIND \
        flag \
        DATE_START \
        DATE_END \
        SRC_DIR \
        SRC_PFX \
        show \
        out \
        stat \
        field_1 \
        field_2

  # Load autocomplete

  source "$(sys_workdir)/completion"

  # Throw to description if no options are passed

  if [[ -z "$@" ]]; then
    sys_description
  fi

  # We just translate options to dasp
  # Get options - send directly to dasp and checked there

  while getopts 's:f:o:M:t:bh' flag; do
    case "${flag}" in
      s) OPTION_s="-s ${OPTARG}"
         readonly OPTION_s
         ;;
      f) OPTION_f="-f ${OPTARG}"
         readonly OPTION_f
         ;;
      o) OPTION_o="-o ${OPTARG}"
         readonly OPTION_O
         ;;
      M) OPTION_M="-M ${OPTARG}"
         readonly OPTION_M
         ;;
      t) OPTION_t="-t ${OPTARG}"
         readonly OPTION_t
         ;;
      b) OPTION_b="-b"
         readonly OPTION_b
         ;;
      h) sys_usage ;;
    esac
  done

  # Default options for apache logs (description is into dasp)

  if [[ -z "${OPTION_f}" ]]; then
    OPTION_f="-f access*"
    readonly OPTION_f
  fi

  # Get dates and reduce positional parametrs

  shift "$((OPTIND-1))"
  
  DATE_START="$1"
  readonly DATE_START
  DATE_END="$2"
  readonly DATE_END

  shift "2"
  
  # Execute dasp (store in $out)
  
  if [[ "$#" != 0 ]]; then
    out="$("$(sys_workdir)"/dasp/dasp \
      ${OPTION_s} \
      ${OPTION_f} \
      ${OPTION_o} \
      ${OPTION_M} \
      ${OPTION_t} \
      ${OPTION_b} \
      -d " " \
      -w "[%d/%b/%Y:%H:%M:%S" \
      -k 4 \
      "${DATE_START}" "${DATE_END}" )"
  else
    # echo "err: Choose one of the positional parametrs" >&2
    sys_tip
    sys_examples
  fi

  # Form total info from output (store in $stat )
  
  for flag in "$@"
  do
    case "${flag}" in

      treq_a)
        stat="${stat}$( echo "Total requests:")\n" 
        stat="${stat}$( echo "${out}" | wc -l )\n"
        ;;
      treq_d)
        stat="${stat}$( echo "Total requests (per day):")\n" 
        stat="${stat}$( echo "${out}" | awk '{print $4}'\
                                      | cut -d: -f1 \
                                      | uniq -c )\n"
        ;;
      treq_h)
        stat="${stat}$( echo "Total requests (per hour):")\n" 
        stat="${stat}$( echo "${out}" | cut -d[ -f2 \
                                      | cut -d] -f1 \
                                      | awk -F: '{print $2":00"}' \
                                      | sort -n \
                                      | uniq -c )\n"
        ;;
      tsize_a)
        stat="${stat}$( echo "Total traffic:")\n"
        stat="${stat}$( echo "${out}" \
          | awk '{ s += $10 } END { print "\t"s/1024/1024 " Mb" }' )\n"
        ;;
      tsize_d)
        stat="${stat}$( echo "Total traffic (per day):")\n" 
        stat="${stat}$( echo "${out}" \
          | awk '{print $4 FS $5 FS $10}' \
          | cut -d[ -f2 \
          | cut -d] -f1,2 \
          | awk \
          '
          { split ($0,arr,"[\040\072]")}
          { print arr[1], arr[6] }
          ' \
          | awk \
          '
          { arr[$1] += $2 } 
            END {
              for (k in arr){
                printf "\t%.2f Mb - %s\n", arr[k]/1024/1024, k
              }
            }
          ' )\n"
        ;;
      tsize_h)
        stat="${stat}$( echo "Total traffic (per hour):")\n" 
        stat="${stat}$( echo "${out}" \
          | awk '{print $4 FS $5 FS $10}' \
          | cut -d[ -f2 \
          | cut -d] -f1,2 \
          | awk \
          '
          { split ($0,arr,"[\040\072]")}
          { print arr[1], arr[2]":00:00", arr[6] }
          ' \
          | awk \
          '
          { arr[$1"_"$2] += $3 } 
            END {
              for (k in arr){
                printf "\t%.2f Mb - %s\n", arr[k]/1024/1024, k
              }
            }
          ' )\n"
        ;;
      tsize_c)
        stat="${stat}$( echo "Total traffic (per code):")\n" 
        stat="${stat}$( echo "${out}" \
          | awk \
          '
          { total[$9] += $10}
            END {
              for (x in total){
                printf "\t%3d : %9.2f Mb\n", x, total[x]/1024/1024
              }
            }
          ' )\n"
        ;;

    esac
  done
  
  # Get user defined fields for reducing output in $out
  
  for flag in "$@"
  do
    case "${flag}" in
      
      # Prefefined views section

      vshort)
        field_1="${field_1}1;4;7;"
        ;;
      vall)
        show='true'
        ;;

      # Field views section (separator - \040)

      fip)
        field_1="${field_1}1;"
        ;;
      fdate)
        field_1="${field_1}4;5;"
        ;;
      ftype)
        field_1="${field_1}6;"
        ;;
      furl)
        field_1="${field_1}7;"
        ;;
      fhttp)
        field_1="${field_1}8;"
        ;;
      fcode)
        field_1="${field_1}9;"
        ;;
      fsize)
        field_1="${field_1}10;"
        ;;

      # Field views section (separator - \042)

      freq)
        field_2="${field_2}2;"
        ;;
      fref)
        field_2="${field_2}4;"
        ;;
      fagent)
        field_2="${field_2}6;"
        ;;

    esac
  done

  # Reduce output in $out with user defined fields

  if [[ -n "${field_1}" || -n "${field_2}" ]]; then

    out="$( echo -n "${out}" | awk \
    -v FIELD_1="${field_1}" \
    -v FIELD_2="${field_2}" \
    '
    BEGIN {
      split (FIELD_1, field_view_1, ";");
      split (FIELD_2, field_view_2, ";");
    }
    {
      split ($0, view_1, "[\040]");
      split ($0, view_2, "[\042]");

      result = ""

      for (k in field_view_1) {
        result = result FS view_1[field_view_1[k]];
      }

      for (k in field_view_2) {
        result = result FS view_2[field_view_2[k]];
      }
 
      sub  (/ /, "", result);
      print result;
    }
    ' )"

    show='true'

  fi

  # Reduce output in $out with filters 
  
  for flag in "$@"
  do
    case "${flag}" in
      uniq)
        out="$( echo "${out}" | sort -n | uniq -c | sort -nr )"
        ;;
    esac
  done
  
  # Show output from $out

  if [[ -n "${show}" ]]; then
    echo -e "${out}"
  fi
  
  # Show total from $stat
  
  if [[ -n "${stat}" ]]; then
    echo -e "Statistic"
    echo -e "\tfrom $(date -d "${DATE_START}" "+%D %T")"
    echo -e "\tto   $(date -d "${DATE_END}" "+%D %T")"
    echo -e "${stat}"
  fi

}

main "$@"